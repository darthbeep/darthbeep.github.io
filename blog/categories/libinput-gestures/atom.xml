<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: libinput-gestures | Opening Open Source]]></title>
  <link href="http://darthbeep.github.io/blog/categories/libinput-gestures/atom.xml" rel="self"/>
  <link href="http://darthbeep.github.io/"/>
  <updated>2019-07-03T04:26:02-04:00</updated>
  <id>http://darthbeep.github.io/</id>
  <author>
    <name><![CDATA[Shaina Peters]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Analyzing an Open Source Project: Part II -- Reading Installation Script Arguments]]></title>
    <link href="http://darthbeep.github.io/blog/2019/07/02/analyzing-an-open-source-project-part-ii-reading-installation-script-arguments/"/>
    <updated>2019-07-02T21:56:58-04:00</updated>
    <id>http://darthbeep.github.io/blog/2019/07/02/analyzing-an-open-source-project-part-ii-reading-installation-script-arguments</id>
    <content type="html"><![CDATA[<p>Here we begin Part II of Analyzing an Open Source Project. For Part I, which deals with setting up and looking at a makefile, <a href="/blog/2019/06/22/how-do-linux-gestures-work-part-i-before-you-install/">click here</a>. The open source project I&rsquo;m analyzing is <a href="https://github.com/bulletmark/libinput-gestures">libinput-gestures</a>, and this part begins looking at the setup script. <a href="https://github.com/bulletmark/libinput-gestures/blob/master/libinput-gestures-setup">Click here</a> for the code. To keep each article from getting too long, the setup script will require multiple articles. This part will focus on getting the program name and article parsing.</p>

<p>Some things start off with a bang, but libinput-gestures-setup starts off with a shebang. So we know that the script is meant to be run in bash, but what else do we know? Well, just like us, the script starts by trying to learn more about itself.</p>

<p><figure class='code'><figcaption><span>libinput-gestures-setup </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">PROG</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span><span class="k">$(</span>basename <span class="nv">$0</span><span class="k">)</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="nv">NAME</span><span class="o">=</span><span class="k">${</span><span class="nv">PROG</span><span class="p">%-*</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The argument <code>$0</code> is the name of the command or script that is run. For example, the <code>$0</code> for <code>ls -l</code> is <code>ls</code>. The command <code>basename</code> strips away both the path to the file and the file extensions. So if you were to call <code>libinput-gestures/libinput-gestures-setup</code> or even .<code>/libinput-gestures-setup</code>, it would take away the first part, making <code>$PROG</code> result in <code>libinput-gestures-setup</code>.</p>

<p>In bash, a <code>%</code> means to remove what comes after it from the suffix. And since what comes after it is <code>-*</code>, meaning the <code>-</code> and everything after it are removed, making <code>$NAME</code> become <code>libinput-gestures</code>. For some interesting and related facts, while <code>%</code> removes everything after the the last instance it finds, <code>%%</code> removes everything after the first instance. While <code>%</code> and <code>%%</code> deal with suffixes, their prefix equivalents are <code>#</code> and <code>##</code> (however, this time <code>##</code> looks for the last instance). And finally, it is an absolute pain to google the symbol <code>%</code>. Yes, even with quotes.</p>

<p>Great! Now we&rsquo;ve gotten through two lines of code! Wasn&rsquo;t that exciting? Well, now we&rsquo;re going to skip around a bit. Don&rsquo;t worry, well cover everything we missed. But first, let&rsquo;s zoom out for a second. The setup script allows for two command line arguments, <code>-d</code> and <code>-r</code>. <code>-d</code> takes and argument, which is used to determine the destination where everything is installed. By default, it&rsquo;s empty and causes everything to be installed in children of the root folder, but the script does give you the option to specify. You probably shouldn&rsquo;t need to if you just plan on installing, but it&rsquo;s good to have options. The <code>-r</code> argument force allows root to perform user commands, and is not recommended. For a more in depth look at these commands, keep reading my blog. Until then, let&rsquo;s look at how arguments are actually parsed.</p>

<p><figure class='code'><figcaption><span>libinput-gestures-setup </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">DESTDIR</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="nv">FORCEROOT</span><span class="o">=</span>0
</span><span class='line'><span class="k">while</span> <span class="nb">getopts </span>d:r c<span class="p">;</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">case</span> <span class="nv">$c</span> in
</span><span class='line'>    d<span class="o">)</span> <span class="nv">DESTDIR</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$OPTARG</span><span class="p">&amp;</span>rdquo<span class="p">;;;</span>
</span><span class='line'>    r<span class="o">)</span> <span class="nv">FORCEROOT</span><span class="o">=</span>1<span class="p">;;</span>
</span><span class='line'>    <span class="se">\?</span><span class="o">)</span> usage<span class="p">;;</span>
</span><span class='line'>    <span class="k">esac</span>
</span><span class='line'><span class="k">done</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;shift <span class="k">$((</span>OPTIND <span class="o">-</span> <span class="m">1</span><span class="k">))</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The first two lines are simple, they&rsquo;re setting the defaults of variables that may or may not be overridden later. But the third is where things get interesting. Given that many bash functions take in arguments of the form <code>-a test -b</code>, there needs to be a builtin to parse them. And that&rsquo;s what getopts is. It&rsquo;s used in a while loop (or for each loop, whichever helps to visualize it better) to make sure that every option is parsed, as the loop will run for every option. Now let&rsquo;s look at the first argument, <code>d:r</code>. The script&rsquo;s two arguments, <code>-d</code> and <code>-r</code> are present, with <code>-d</code>, which takes an argument, on the left, and <code>-r</code>, which does not, on the right. The second getopts argument, <code>c</code>, will be filled with the argument the user uses. At the same time, if applicable, the builtin <code>$OPTARG</code> will be filled with the argument&rsquo;s argument. For example, if the user types in the command <code>./libinput-gestures-setup -d place -r</code>, the first pass of the while loop will fill <code>$c</code> with <code>d</code> and <code>$OPTARG</code> with <code>test</code>, and on the second pass <code>$c</code> will fill with <code>r</code>.</p>

<p>Now that we know <code>$c</code> is being filled in with something, the question is what we can do about that. And the answer is a case statement. Interestingly enough, the case command&rsquo;s man page calls it obsolete and says it should be replaced by switch statements. Though case statements seem far more popular online. In this particular case, the programmer probably doesn&rsquo;t need to switch, but it&rsquo;s something to keep in mind.</p>

<p>Once you get past the confusing getopts syntax, case statements are fairly readable. The syntax checks what <code>$c</code> is against <code>d</code>, and if so sets <code>$DESTDIR</code> to <code>$OPTARG</code>, which holds <code>-d</code>&rsquo;s argument. All case statements are terminated with two semicolons. Similar is the case for <code>r</code>. If an illegal option is called, the case <code>\?</code> will trigger. This calls the function <code>usage</code>, which outputs the script&rsquo;s usage as text and then quits with an error. After the case is chosen, the case statement will end with <code>esac</code>.</p>

<p>Why <code>esac</code>? To slightly paraphrase <a href="https://unix.stackexchange.com/a/256175">this answer</a>, the <code>case</code>/<code>esac</code> convention, as well as if statements ending in fi, comes from ALGOL68. Both the original <code>sh</code> shell and ALGOL68 have, the same author, Stephen Borne. One of the influences <code>sh</code> took from ALGOL68 are the <code>case</code>/<code>esac</code> and <code>if</code>/<code>fi</code> openings and closings. ALGOL68 also has <code>do</code>/<code>od</code> as a pair, but <code>od</code> is already a keyword in bash (octal dump), so that was scrapped in favor of <code>done</code>.</p>

<p>This leaves us with one final line of code, <code>shift $((OPTIND - 1))</code>. Of the statement above, this part is the most enigmatic. If you google around to understand getopts, you&rsquo;ll find that this part is usually ignored. You don&rsquo;t achieve anything by modifying it, and it&rsquo;s something you put at the end no matter what. So, what does this command actually do, and how does it work?</p>

<p>Starting from the beginning, the variable <code>$OPTIND</code>, short for option index, is part of the <code>getopts</code> utility. When <code>getopts</code> runs through the command line argument, like a for each loop, it needs something to look at next. At all times, the next argument for <code>getopts</code> is stored in <code>$OPTIND</code>. How does this work so easily? <code>$OPTIND</code> isn&rsquo;t actually storage, but a number. Remember, <code>$1</code> in bash will get you the first argument, <code>$2</code> the second, and so on. So <code>$OPTIND</code> starts at 1 and is incremented with each pass. If you run the program with 3 arguments, <code>$OPTIND</code> will end as 4.</p>

<p>In bash, double parentheses evaluate an expression, and a $ in front of them returns the result as a statement. So shift is being called on the result of <code>$OPTIND - 1</code>. <code>shift</code> is a command which shifts the position of arguments to the left by the number given to it as argument. That is, if you run <code>shift 2</code>, the variable that used to be referenced with <code>$4</code> can now be referenced with <code>$2.</code> Because <code>$OPTIND</code> is always one more than the number of optional arguments, shifting by <code>$OPTIND - 1</code> will make the main arguments always be in the same place. So for example calling <code>./libinput-gestures-setup -d place install</code> and <code>./libinput-gestures-setup install</code> will both lead to <code>install</code> being <code>$1</code> after the shift happens.</p>

<p>The next function is fairly simple.</p>

<p><figure class='code'><figcaption><span>libinput-gestures-setup </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$# </span>-ne <span class="m">1</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    usage
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The program wants you to input only one main command, in this case <code>start</code>, <code>stop</code>, <code>restart</code>, <code>autostart</code>, <code>autostop</code>, or <code>status</code>. If you give it a number of commands that is not one, it will display the usage. The program checks if you are giving it only one argument (after the shift), with <code>[[ $# -ne 1 ]]</code>. Double square brackets surround a statement. <code>-ne</code> compares two numbers to see if they are not equal, in this case <code>$#</code> or the number of arguments, and 1. So if the number of arguments is not equal to one, the <code>usage</code> function is triggered. Otherwise, you can proceed on to</p>

<p><figure class='code'><figcaption><span>libinput-gestures-setup </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">cmd</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$1</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Whatever the main command is, it&rsquo;s stored in the argument <code>$1</code>. So now the script knows what you&rsquo;re trying to do, and sets it as the <code>$cmd</code> variable.</p>

<p>That&rsquo;s all for this entry, but keep reading to find out what&rsquo;s next. Check out this blog next time for more exciting code. In either way you interpret that sentence.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Analyzing an Open Source Project: Part I -- Before You Install]]></title>
    <link href="http://darthbeep.github.io/blog/2019/06/22/how-do-linux-gestures-work-part-i-before-you-install/"/>
    <updated>2019-06-22T23:52:26-04:00</updated>
    <id>http://darthbeep.github.io/blog/2019/06/22/how-do-linux-gestures-work-part-i-before-you-install</id>
    <content type="html"><![CDATA[<p>I&rsquo;m probably one of the only Linux users who really like gestures. Going back a web page and switching desktops with a swipe of my fingers is really easy and convenient. But when I switched to Linux, I found the support rediculously lacking. It took a week of searching and trial and error to finally figure out how to implemnet gestures, at which point I stumbled upon <a href="https://github.com/bulletmark/libinput-gestures" title="libinput-gestures">libinput gestures</a>, which finally did solve my problem. Now that I have a solution (and a fair amount of time has passed) I want to work on a project: documenting open source. But not just going over the functions, but going extremely in depth and looking at EVERYTHING that happens.</p>

<p>This guide won&rsquo;t just show off what happens to make gestures work, but will talk about everything along the way. While the actual code is written in python, this part will only focus on bash and make. For an in depth analysis of the code, look for later parts. Because this code is based on the libinput-gestures code, you should familiarise yourself with the README and Makefile before or during your reading. Now let&rsquo;s get started.</p>

<p>No matter where you go to do your gestures, you’ll encounter the same command before you start:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo gpasswd -a <span class="nv">$USER</span> input
</span></code></pre></td></tr></table></div></figure></p>

<p>To understand this command, first you need to understand groups. Though they are commonly come across, they don’t get much attention. If you <code>chmod</code> a file to 764, you’re saying that the group is given permissions associated with 6 (reading and writing). The middle 3 characters when you use <code>$ ls -l</code> say the permissions the file’s group has when modifying it. Every file has not just a user who can access it, but a group. While said group is often just the user, that’s not always the case. In this case, we’re dealing with a series of files that can only be accessed by the group input.</p>

<p>The command gpasswd is used when administrating groups. The argument <code>-a</code> adds a user to a group. So <code>$ gpasswd -a $USER input</code> adds <code>$USER</code> (which is your username) to the group input. This is important because the group input has access to the files <code>/dev/input/event*</code> (as well as <code>/dev/input/mouse*</code>, though this is less important for gestures). So what is the point of this?</p>

<p>You may have heard the saying “In Linux, everything is a file.” Well, that includes input devices. And if you&rsquo;re going to treat physical files like devices, you need to include that actual files for the devices. These are said files. These files, whose type is character files, are essentially pipes between physical inputs and what the computer receives. Although they are simply labeled event followed by a number, running the command <code>$ xinput list</code> will tell you exactly which event pipe corresponds with which device. In this particular case, the only file necessary is the one for the trackpad.</p>

<p>Now that you&rsquo;re allowing the user access to the input devices, you can actually install libinput gestures. Immediately running <code>$ make install</code> is the easiest way to set up gestures, but that is neither the only way to set up functions nor the only way to use the makefile. Starting with the latter, the makefile includes <code>make all</code>, which tells you to run <code>make install</code> or <code>make uninstall</code>, which run the install script that will be covered next entry, and <code>make clean</code>, which cleans. The makefile also includes two more slightly more interesting rules, which I&rsquo;m going to discuss in detail because their code is interesting. The first, <code>make doc</code>, is as follows (including all of the relevant code but leaving out everything else):</p>

<p><figure class='code'><figcaption><span>Makefile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="nv">DOC</span> <span class="o">=</span> README.md
</span><span class='line'><span class="nv">DOCOUT</span> <span class="o">=</span> <span class="k">$(</span>DOC:.md<span class="o">=</span>.html<span class="k">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;doc</span><span class="o">:</span> <span class="k">$(</span><span class="nv">DOCOUT</span><span class="k">)</span>&lt;/<span class="n">p</span>&gt;
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;$(DOCOUT)</span><span class="o">:</span> <span class="k">$(</span><span class="nv">DOC</span><span class="k">)</span>
</span><span class='line'>  markdown <span class="nv">$&amp;</span>lt<span class="p">;</span> &gt;<span class="nv">$@</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The interesting part of this command comes not from the content, but the presentation. But what it actually does is fairly simple. The command markdown converts a text file to html. The make variable <code>$&lt;</code> gives the name of the first prerequisite, in this case <code>$(DOC)</code>, which is defined earlier as <code>README.md</code>. The second variable, <code>&gt;$@</code>, is a little more complex. Any variable prefixed with <code>&gt;</code> means that if it involves a file, that file will be overridden, rather than appended to. And <code>$@</code> takes in the target of the rule, in this case <code>$(DOCOUT)</code>. <code>$(DOCOUT)</code> takes in <code>$(DOC)</code> (still <code>README.md</code>) and performs a substitution reference on it, substituting .md for .html. So essentially <code>$(DOCOUT)</code> is equivalent to <code>README.html</code>. Put together, all of this means convert to markdown README.md, outputting with override to the file <code>README.html</code>. Or, in simplest terms, converting the README from markdown to html.</p>

<p>The second rule, <code>make check</code> is less stylish or hard to read, but it&rsquo;s no less interesting. Instead, its uniqueness comes from its content. The rule is as follows:</p>

<p><figure class='code'><figcaption><span>Makefile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="nv">SHELLCHECK_OPTS</span> <span class="o">=</span> -eSC2053,SC2064,SC2086,SC1117,SC2162,SC2181,SC2034,SC1090,SC2115&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;check</span><span class="o">:</span>
</span><span class='line'>    flake8 libinput-gestures
</span><span class='line'>    shellcheck <span class="k">$(</span>SHELLCHECK_OPTS<span class="k">)</span> libinput-gestures-setup list-version-hashes
</span></code></pre></td></tr></table></div></figure></p>

<p>This is pretty standard make. The interesting part comes with the make code. The first line  just does exactly what it says, running the command <code>$ flake8 libinput-gestures</code>. <code>flake8</code> is a command that tests for proper conventions in python code. This check fails, as line 533 is longer than 80 characters. I don&rsquo;t know why the developers included a check if they don&rsquo;t intend to use it themselves, but if anyone is looking for an easy pull request, they can have one. The second line is similar in that it checks shell scripts for errors and bad code, though it differs in that the code passes the check. It also includes an argument <code>-e</code> which tells it to exclude the errors corresponding to the codes listed after it. In short, the allowed forms of bad code are redundant logic, double double quotation marks, not double quoting expanding variables, using <code>\n</code> rather than <code>\\n</code>, using read without <code>-r</code>, running then checking exit status in two steps, unused variables, not using a directive to specify the location of a source file with a variable location, and not checking to make sure a path variable isn&rsquo;t empty. The conclusion that can be drawn from this is shellcheck has a lot of different types of errors. I&rsquo;m not sure if this is intentional or laziness, though there are a lot of fixable errors if shellcheck is run to allow these errors (though some do seem justified in the code).</p>

<p>So which shellcheck errors are justified? And what happens after you actually type make install? How does libinput gestures actually work? Find out next time on my blog.</p>
]]></content>
  </entry>
  
</feed>
